// Ki·ªÉm tra vai tr√≤ c·ªßa ng∆∞·ªùi d√πng t·ª´ localStorage
let userName = localStorage.getItem("userName");
let userId = localStorage.getItem("userId");
let userRole = localStorage.getItem("userRole");

console.log("User Info:", { userName, userId, userRole });
console.log("User Role:", userRole);
const allowedPages = {
    user: ["home", "list-courts", "appointments", "history", "membership", "map"],
    admin: ["home", "manage-courts", "manage-users","allAppointments", "statistics", "map"]
};

// ·∫®n/hi·ªán menu theo vai tr√≤
function updateMenuByRole() {
    const menuItems = document.querySelectorAll(".below-top a");
    menuItems.forEach(item => {
        const onclickAttr = item.getAttribute("onclick");
        const match = onclickAttr?.match(/showContent\('([^']+)',?\s*this?\)/);
        if (!match) {
            console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y thu·ªôc t√≠nh onclick h·ª£p l·ªá:", item);
            return;
        }
        const page = match[1]; 
        if (!allowedPages[userRole] || !allowedPages[userRole].includes(page)) {
            item.style.display = "none";
        } else {
            item.style.display = "inline-block";
        }
    });
}   

document.addEventListener("DOMContentLoaded", updateMenuByRole);

function showContent(page, element) {
    document.querySelectorAll(".content").forEach(div => div.style.display = "none");
    let targetElement = document.getElementById(page);
    if (targetElement) {
        targetElement.style.display = page === "map" ? "flex" : "block";
    }
    document.querySelectorAll(".below-top a").forEach(link => link.classList.remove("active"));
    if (element) {
        element.classList.add("active");
    }
}

window.onload = function () {
    document.querySelectorAll(".content").forEach(div => div.style.display = "none");

    if (userName) {
        document.getElementById("user-name").style.display = "block";
        document.getElementById("user-name-text").textContent = userName;
        document.getElementById("loginLink").style.display = "none";
        document.getElementById("signupLink").style.display = "none";
    } else {
        document.getElementById("loginLink").style.display = "block";
        document.getElementById("signupLink").style.display = "block";
        document.getElementById("user-name").style.display = "none";
    }

    showContent('home', document.querySelector(".below-top a"));

    document.getElementById("loginLink").setAttribute("href", getPath("Login.html"));
    document.getElementById("signupLink").setAttribute("href", getPath("Signup.html"));

    updateMenuByRole();
};


function getPath(filename) {
    const isLiveServer = window.location.protocol === "file:";
    return isLiveServer ? `/html_file/${filename}` : `/${filename}`;
}

function addMessage(sender, text) {
    let chatMessages = document.querySelector(".chat-messages");
    let messageDiv = document.createElement("div");
    messageDiv.classList.add("message");
    messageDiv.innerHTML = `<strong>${sender}:</strong> ${text}`;
    chatMessages.appendChild(messageDiv);

    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function toggleChat() {
    let chatBox = document.querySelector(".chat-box");
    let chatIcon = document.querySelector(".chat-icon");

    if (chatBox.style.display === "none" || chatBox.style.display === "") {
        chatBox.style.display = "block";
        chatIcon.style.display = "flex";
    } else {
        chatBox.style.display = "none";
        chatIcon.style.display = "flex";
    }
}
//chatbot
document.addEventListener("DOMContentLoaded", function () {
    let chatMessages = document.querySelector(".chat-messages");

    const botResponses = {
        "Gi·ªù m·ªü c·ª≠a": "‚è∞ Ch√∫ng t√¥i m·ªü c·ª≠a t·ª´ 6h00 - 22h00 h√†ng ng√†y.",
        "Gi√° d·ªãch v·ª•": "üí∞ B·∫°n c√≥ th·ªÉ xem b·∫£ng gi√° chi ti·∫øt trong m·ª•c danh s√°ch s√¢n.",
        "Li√™n h·ªá v·ªõi nh√¢n vi√™n": "üìû G·ªçi v√†o s·ªë 0123456789 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t!",
        "T·∫°m bi·ªát": "üôè C·∫£m ∆°n b·∫°n ƒë√£ gh√© thƒÉm! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!"
    };

    function sendMessage(userMessage) {
        addMessage("B·∫°n", userMessage);
    
        if (userMessage === "H∆∞·ªõng d·∫´n thanh to√°n") {
            sendStepByStepPayment();
            return; 
        }
    
        if (userMessage === "H·ªßy s√¢n") {
            sendStepByStepCancel();
            return; 
        }
    
        if (userMessage === "Xem l·ªãch s·ª≠ thanh to√°n") {
            sendStepByStepPayment();
            return;
        }
    
        if (userMessage === "Xem l·ªãch s·ª≠ ƒë·∫∑t s√¢n") {
            sendStepByStepBooking();
            return;
        }
    
        setTimeout(() => {
            let botReply = botResponses[userMessage] || "ü§ñ Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n.";
            addMessage("Bot", botReply);
        }, 500);
    }
    function addMessage(sender, text) {
        let messageDiv = document.createElement("div");
        messageDiv.classList.add("message");
    
        // Th√™m l·ªõp t√πy thu·ªôc v√†o ng∆∞·ªùi g·ª≠i
        if (sender === "B·∫°n") {
            messageDiv.classList.add("user");
        } else {
            messageDiv.classList.add("bot");
        }
    
        messageDiv.innerHTML = `<strong>${sender}:</strong> ${text}`;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    function sendStepByStepPayment() {
        setTimeout(() => addMessage("Bot", "üí≥ **H∆∞·ªõng d·∫´n thanh to√°n:**"), 500);
        setTimeout(() => addMessage("Bot", "1Ô∏è‚É£ Truy c·∫≠p v√†o danh s√°ch s√¢n."), 1000);
        setTimeout(() => addMessage("Bot", "2Ô∏è‚É£ Ch·ªçn s√¢n m√† b·∫°n mu·ªën ƒë·∫∑t."), 1500);
        setTimeout(() => addMessage("Bot", "3Ô∏è‚É£ Ch·ªçn khung gi·ªù v√† ph∆∞∆°ng th·ª©c thanh to√°n."), 2000);
        setTimeout(() => addMessage("Bot", "4Ô∏è‚É£ Nh·∫•n 'ƒê√£ thanh to√°n' sau khi ho√†n t·∫•t giao d·ªãch."), 2500);
    }

    function sendStepByStepCancel() {
        setTimeout(() => addMessage("Bot", " **H∆∞·ªõng d·∫´n h·ªßy s√¢n:**"), 500);
        setTimeout(() => addMessage("Bot", "1Ô∏è‚É£ Truy c·∫≠p v√†o qu·∫£n l√Ω l·ªãch h·∫πn."), 1000);
        setTimeout(() => addMessage("Bot", "2Ô∏è‚É£ Ch·ªçn l·ªãch ƒë·∫∑t m√† b·∫°n mu·ªën h·ªßy."), 1500);
        setTimeout(() => addMessage("Bot", "3Ô∏è‚É£ Nh·∫•n h·ªßy s√¢n ·ªü b√™n d∆∞·ªõid∆∞·ªõi."), 2000);
        setTimeout(() => addMessage("Bot", "‚ö†Ô∏è Ch·ªâ c√≥ th·ªÉ h·ªßy s√¢n tr∆∞·ªõc 2 ti·∫øng so v·ªõi th·ªùi gian ƒë·∫∑t "), 2500);
    }
    
    function sendStepByStepPayment() {
        setTimeout(() => addMessage("Bot", "üí≥ **H∆∞·ªõng d·∫´n xem l·ªãch s·ª≠ thanh to√°n:**"), 500);
        setTimeout(() => addMessage("Bot", "1Ô∏è‚É£ Truy c·∫≠p v√†o m·ª•c l·ªãch s·ª≠ thanh to√°n tr√™n menu."), 1000);
        setTimeout(() => addMessage("Bot", "2Ô∏è‚É£ Hi·ªÉn th·ªã l·ªãch s·ª≠ thanh to√°nto√°n"), 1500);
    }

    function sendStepByStepBooking() {
        setTimeout(() => addMessage("Bot", "üí≥ **H∆∞·ªõng d·∫´n thanh to√°n:**"), 500);
        setTimeout(() => addMessage("Bot", "1Ô∏è‚É£ Truy c·∫≠p v√†o qu·∫£n l√Ω l·ªãch h·∫πn."), 1000);
        setTimeout(() => addMessage("Bot", "2Ô∏è‚É£ H·ªá th·ªëng s·∫Ω hi·ªÉn th·ªã danh s√°ch c√°c l·ªãch m√† b·∫°n ƒë√£ ƒë·∫∑t."), 1500);
    }

    function addMessage(sender, text) {
        let messageDiv = document.createElement("div");
        messageDiv.classList.add("message");
        messageDiv.innerHTML = `<strong>${sender}:</strong> ${text}`;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    window.sendMessage = sendMessage;
});

document.addEventListener("DOMContentLoaded", function () {
    var map = L.map('leafletMap').setView([20.9725, 105.7772], 14);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);
    fetch("http://localhost:3000/locations")
        .then(response => response.json())
        .then(locations => {
            if (Array.isArray(locations)) {
                var markers = locations.map(loc => {
                    var marker = L.marker([loc.lat, loc.lng]).addTo(map);
                    marker.bindTooltip(loc.name, { permanent: true, direction: "top" });
                    marker.bindPopup(`<b>${loc.name}</b><br>${loc.address}`);
                    return marker;
                });
                var group = new L.featureGroup(markers);
                map.fitBounds(group.getBounds(), { padding: [50, 50] });
            } else {
                console.error("D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ph·∫£i l√† m·∫£ng.");
            }
        })
        .catch(error => console.error('L·ªói khi l·∫•y d·ªØ li·ªáu s√¢n:', error));

    // ‚úÖ S·ª≠a l·ªói x√°c ƒë·ªãnh v·ªã tr√≠ ng∆∞·ªùi d√πng (c·∫ßn ki·ªÉm tra `navigator.geolocation`)
    function locateUser() {
        if (!navigator.geolocation) {
            alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ x√°c ƒë·ªãnh v·ªã tr√≠.");
            return;
        }

        navigator.geolocation.getCurrentPosition(
            function (position) {
                var userLat = position.coords.latitude;
                var userLng = position.coords.longitude;

                function cleanAddress(address) {
                    let parts = address.split(", ");
                    if (parts.length > 5) {
                        return parts.slice(0, 5).join(", "); 
                    }
                    return address;
                }

                fetch(`https://nominatim.openstreetmap.org/reverse?lat=${userLat}&lon=${userLng}&format=json&accept-language=vi`)
                    .then(response => response.json())
                    .then(data => {
                        let address = cleanAddress(data.display_name);
                        var userMarker = L.marker([userLat, userLng]).addTo(map)
                            .bindPopup(`<b>V·ªã tr√≠ c·ªßa b·∫°n</b><br>${address}`).openPopup();
                        map.setView([userLat, userLng], 15);
                    })
                    .catch(error => {
                        console.error("L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:", error);
                        var userMarker = L.marker([userLat, userLng]).addTo(map)
                            .bindPopup("<b>V·ªã tr√≠ c·ªßa b·∫°n</b><br>Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ƒë·ªãa ch·ªâ").openPopup();
                        map.setView([userLat, userLng], 15);
                    });
            },
            function (error) {
                alert("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t.");
            }
        );
    }

    var locateButton = L.control({ position: "topright" });
    locateButton.onAdd = function () {
        var btn = L.DomUtil.create("button", "locate-button");
        btn.innerHTML = "üìç X√°c ƒë·ªãnh v·ªã tr√≠";
        btn.onclick = locateUser;
        return btn;
    };
    locateButton.addTo(map);
});

function toggleUserDropdown(event) {
    var dropdown = document.getElementById("user-dropdown");
    
    if (dropdown.style.display === "block") {
        dropdown.style.display = "none";
    } else {
        dropdown.style.display = "block";
    }
    event.stopPropagation();
}

function manageProfile() {
    alert("Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n");
}

function logout() {
    if (confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?")) {
        localStorage.removeItem("userInfo"); 
        sessionStorage.removeItem("userInfo");
        window.location.href = "login.html"; 
    }
}

let nextMembership = document.querySelector('.next-membership');
let prevMembership = document.querySelector('.prev-membership');

if (nextMembership && prevMembership) {
    nextMembership.addEventListener('click', function () {
        let items = document.querySelectorAll('.membership-item');
        document.querySelector('.membership-slide').appendChild(items[0]);
    });

    prevMembership.addEventListener('click', function () {
        let items = document.querySelectorAll('.membership-item');
        document.querySelector('.membership-slide').prepend(items[items.length - 1]);
    });
}

async function loadPickleballData() {
    try {
        const locationsRes = await fetch('http://localhost:3000/locations');
        const locations = await locationsRes.json();
        const sanRes = await fetch('http://localhost:3000/san');
        const sanList = await sanRes.json();
        console.log("üèÄ Locations:", locations);
        console.log("üèüÔ∏è Courts:", sanList);
        let courtCount = {};
        sanList.forEach(san => {
            let locationId = san.location_id;
            courtCount[locationId] = (courtCount[locationId] || 0) + 1;
        });
        locations.sort((a, b) => a.id - b.id);

        let htmlContent = `<p>C√≥ ${locations.length} c∆° s·ªü:</p><ul>`;
        locations.forEach(loc => {
            let numCourts = courtCount[loc.id] || 0;
            htmlContent += `<li>${loc.name}: c√≥ ${numCourts} s√¢n</li>`;
        });

        htmlContent += `</ul>`;
        document.getElementById("listed").innerHTML = htmlContent;

    } catch (error) {
        console.error("üö® L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
    }
}
document.addEventListener("DOMContentLoaded", loadPickleballData);

document.addEventListener("DOMContentLoaded", function () {
    const elements = document.querySelectorAll(".ql-images, .tk-images,.intro-content, .intro-image,.cards .card");

    function checkScroll() {
        const triggerBottom = window.innerHeight * 0.9;
        elements.forEach(el => {
            if (el.getBoundingClientRect().top < triggerBottom) {
                el.classList.add("show");
            }
        });
    }
    window.addEventListener("scroll", checkScroll);
    checkScroll();
});
document.addEventListener("DOMContentLoaded", function () {
    const registerButtons = document.querySelectorAll(".register-btn");
    const modal = document.getElementById("membership-modal");
    const modalTitle = document.getElementById("modal-title");
    const modalDescription = document.getElementById("modal-description");
    const modalImage = document.getElementById("modal-image");
    const closeModal = document.querySelector(".close-btn");

    const paymentModal = document.getElementById("payment-modal");
    const confirmPaymentModal = document.getElementById("confirm-payment-modal");

    let currentMembership = {}; // L∆∞u th√¥ng tin g√≥i th√†nh vi√™n

    async function fetchMembership(idGoi) {
        try {
            const response = await fetch(`http://localhost:3000/membership/${idGoi}`);
            if (!response.ok) throw new Error(`L·ªói: ${response.status} - ${response.statusText}`);
            return await response.json();
        } catch (error) {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
            alert("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin g√≥i th√†nh vi√™n. Vui l√≤ng th·ª≠ l·∫°i!");
            return null;
        }
    }

    registerButtons.forEach((button) => {
        button.addEventListener("click", async function () {
            const membershipItem = button.closest(".membership-item");
            const idGoi = membershipItem.getAttribute("data-id");

            const data = await fetchMembership(idGoi);
            if (!data) return;

            currentMembership = {
                id: idGoi,
                tenGoi: data.TenGoi,
                giaTien: data.GiaTien,
                quyenLoi: data.QuyenLoi,
                thoiHan: data.ThoiHan,
            };

            modalTitle.innerText = data.TenGoi;
            modalDescription.innerText = `Gi√°: ${data.GiaTien.toLocaleString("vi-VN")} VNƒê\nQuy·ªÅn l·ª£i: ${data.QuyenLoi}\nTh·ªùi h·∫°n: ${data.ThoiHan}`;
            modalImage.src = membershipItem.getAttribute("data-image");

            modal.style.display = "block";
        });
    });

    function closeModalHandler(event) {
        event.target.closest(".modal").style.display = "none";
    }

    closeModal.addEventListener("click", closeModalHandler);
    document.querySelector(".close-payment").addEventListener("click", closeModalHandler);
    document.querySelector(".close-confirm-payment").addEventListener("click", closeModalHandler);

    window.addEventListener("click", function (event) {
        if (event.target.classList.contains("modal")) {
            event.target.style.display = "none";
        }
    });

    document.getElementById("confirm-btn").addEventListener("click", function () {
        if (!currentMembership.giaTien) {
            alert("Vui l√≤ng ch·ªçn g√≥i th√†nh vi√™n tr∆∞·ªõc khi thanh to√°n.");
            return;
        }
        modal.style.display = "none";
        paymentModal.style.display = "flex";
    });

    document.getElementById("pay-now-btn").addEventListener("click", async function () {
        paymentModal.style.display = "none";
        confirmPaymentModal.style.display = "flex";

        await updatePaymentModal();
    });

    async function getUserInfo(userId) {
        try {
            const response = await fetch(`http://localhost:3000/nguoidung/${userId}`);
            if (!response.ok) throw new Error(`L·ªói: ${response.status} - ${response.statusText}`);
            return await response.json();
        } catch (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
            return null;
        }
    }

    async function updatePaymentModal() {
        const userId = localStorage.getItem("userId");
        if (!userId) {
            console.error("Kh√¥ng t√¨m th·∫•y userId trong localStorage.");
            return;
        }

        const userInfo = await getUserInfo(userId);
        if (!userInfo) return;

        document.getElementById("payer-name").textContent = userInfo.HoTen || "N/A";
        document.getElementById("payer-email").textContent = userInfo.Email || "N/A";
        document.getElementById("payer-phone").textContent = userInfo.SDT || "N/A";

        const formattedDate = new Date().toLocaleDateString("vi-VN");
        document.getElementById("payment-date").textContent = formattedDate;

        document.getElementById("total-amount").textContent = `${currentMembership.giaTien.toLocaleString("vi-VN")} VNƒê`;

        const soTaiKhoan = "8831814758";
        const nganHang = "970418";
        const soTien = currentMembership.giaTien;
        const noiDung = encodeURIComponent(`Thanh toan goi ${currentMembership.tenGoi}`);

        const vietqrLink = `https://img.vietqr.io/image/${nganHang}-${soTaiKhoan}-compact2.jpg?amount=${soTien}&addInfo=${noiDung}`;

        document.getElementById("vietqr-image").src = vietqrLink;
    }

    document.getElementById("confirm-payment-btn").addEventListener("click", async function () {
        const userId = localStorage.getItem("userId");
        if (!userId) {
            alert("Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
            return;
        }

        if (!currentMembership.id || !currentMembership.giaTien) {
            alert("L·ªói: Kh√¥ng c√≥ th√¥ng tin thanh to√°n h·ª£p l·ªá.");
            return;
        }

        let now = new Date();
        let paymentTime = `${now.getDate()}/${now.getMonth() + 1}/${now.getFullYear()} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;
        const transactionData = {
            userId,
            membershipId: currentMembership.id,
            membershipName: currentMembership.tenGoi,
            amount: currentMembership.giaTien,
            paymentTime
        };

        try {
            const response = await fetch("http://localhost:3000/handle-membership-payment", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(transactionData),
            });

            const result = await response.json();

            if (result.success) {
                alert("‚úÖ Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng!");
                confirmPaymentModal.style.display = "none"; // ƒê√≥ng modal
                location.reload(); // Refresh trang
            } else {
                alert("‚ùå X√°c nh·∫≠n thanh to√°n th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
            }
        } catch (error) {
            console.error("L·ªói khi g·ª≠i x√°c nh·∫≠n thanh to√°n:", error);
            alert("‚ùå ƒê√£ x·∫£y ra l·ªói khi x√°c nh·∫≠n thanh to√°n.");
        }
    });
});

function toggleNotificationDropdown(event) {
    const dropdown = document.getElementById("notification-dropdown");
    if (dropdown.style.display === "block") {
        dropdown.style.display = "none";
    } else {
        dropdown.style.display = "block";
    }
    event.stopPropagation();
}

//·∫©n dropdown khi click ra ngo√†i
document.addEventListener("click", function (event) {
    const dropdown = document.getElementById("notification-dropdown");
    if (!dropdown.contains(event.target) && !event.target.closest(".notification-icon")) {
        dropdown.style.display = "none";
    }
});

//l·∫•y th√¥ng b√°o t·ª´ database
function getNotifications() {
    fetch("http://localhost:3000/notifications")
        .then(response => response.json())
        .then(notifications => {
            const dropdown = document.getElementById("notification-dropdown");
            notifications.forEach(notification => {
                if (notification.title === "Th√¥ng b√°o" && notification.message === "B·∫°n ch∆∞a c√≥ th√¥ng b√°o n√†o") {
                    return;
                }
                const notificationItem = document.createElement("li");
                notificationItem.innerHTML = `<strong>${notification.title}</strong> - ${notification.message}`;
                dropdown.appendChild(notificationItem);
            });
        })
        .catch(error => console.error("L·ªói khi l·∫•y th√¥ng b√°o:", error));
}

//c·∫≠p nh·∫≠t s·ªë th√¥ng b√°o
function updateNotificationCount() {
    const count = document.querySelector(".notification-count");
    count.textContent = "0";
}

//x·ª≠ l√Ω click v√†o th√¥ng b√°o
function handleNotificationClick(event) {
    const dropdown = document.getElementById("notification-dropdown");
    dropdown.style.display = "none";
}