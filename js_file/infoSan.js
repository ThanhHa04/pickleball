document.addEventListener("DOMContentLoaded", function () {
  console.log("‚úÖ DOM ƒë√£ s·∫µn s√†ng!");

  const urlParams = new URLSearchParams(window.location.search);
  const idSan = urlParams.get("idSan");

  if (!idSan) {
      document.querySelector(".container").innerHTML = "<p>Kh√¥ng t√¨m th·∫•y ID s√¢n trong URL!</p>";
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y idSan trong URL.");
      return;
  }

  const fetchChiTietSan = fetch(`http://localhost:3000/chitietsan/${idSan}`).then(res => res.json());
  const fetchSan = fetch(`http://localhost:3000/san/${idSan}`).then(res => res.json());

  Promise.all([fetchChiTietSan, fetchSan])
      .then(([dataChiTiet, dataSan]) => {
          if (!dataChiTiet || !dataChiTiet.IDSan) {
              document.querySelector(".container").innerHTML = "<p>Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt s√¢n.</p>";
              return;
          }
          if (!dataSan) {
              document.querySelector(".container").innerHTML = "<p>Kh√¥ng c√≥ d·ªØ li·ªáu s√¢n t·ª´ API /san.</p>";
              return;
          }
          setTextContent("tensan", dataSan.TenSan);
          setTextContent("mota", dataChiTiet.MoTa);
          setTextContent("gioHoatDong", dataChiTiet.GioHoatDong);
          setTextContent("giaSan", dataSan.GiaThue ? `${formatCurrency(dataSan.GiaThue)} ƒë` : "Kh√¥ng c√≥");
          setTextContent("loaiSan", dataSan.MoTa);
          let galleryHtml = "";
          if (dataSan.HinhAnh && typeof dataSan.HinhAnh === "string") {
              galleryHtml = `<img src="${dataSan.HinhAnh}" alt="H√¨nh ·∫£nh s√¢n">`;
          } else if (Array.isArray(dataSan.HinhAnh) && dataSan.HinhAnh.length > 0) {
              galleryHtml = dataSan.HinhAnh.map(img => `<img src="${img}" alt="H√¨nh ·∫£nh s√¢n">`).join("");
          } else {
              galleryHtml = "<p>Kh√¥ng c√≥ h√¨nh ·∫£nh.</p>";
          }
          document.getElementById("hinhAnh").innerHTML = galleryHtml;
          loadSchedule(idSan);
      })
      .catch(error => {
          console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin s√¢n:", error);
          document.querySelector(".container").innerHTML = "<p>L·ªói khi l·∫•y th√¥ng tin s√¢n.</p>";
      });
});

async function getUserInfo(userId) {
  try {
    const response = await fetch(`http://localhost:3000/nguoidung/${userId}`);
    if (!response.ok) {
      throw new Error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
    }
    const userData = await response.json();
    return userData;
  } catch (error) {
    console.error(error);
    return null;
  }
}

async function loadSchedule(idSan) {
  console.log("üîÑ ƒêang t·∫£i l·ªãch...");
  try {
    const response = await fetch(`http://localhost:3000/lich/${idSan}`);
    if (!response.ok) throw new Error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu l·ªãch");

    const data = await response.json();
    const schedule = organizeSchedule(data);
    const dateList = generateDateList(Object.keys(schedule)[0], 3);
    renderSchedule(dateList, schedule);
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói t·∫£i l·ªãch:", error);
  }
}

function renderSchedule(dateList, schedule) {
  const table = document.getElementById("scheduleTable");
  const theadRow = table.querySelector("thead tr");
  const tbody = table.querySelector("tbody");

  theadRow.innerHTML = "<th>Gi·ªù</th>";
  dateList.forEach(date => {
    theadRow.innerHTML += `<th>${formatDate(date)}</th>`;
  });

  tbody.innerHTML = "";
  const now = new Date();
  const currentHour = now.getHours();
for (let h = 6; h <= 21; h++) {
    const hourStr = `${h < 10 ? "0" + h : h}:00`;
    const tr = document.createElement("tr");
    tr.innerHTML = `<td class="hour-col">${hourStr}</td>`;

    dateList.forEach(date => {
        const slot = schedule[date]?.[hourStr];
        const slotTime = new Date(date + "T" + hourStr + ":00"); 

        let cellContent = `<span class="empty-slot">-</span>`;
        let cellClass = "";

        tbody.innerHTML = "";
  const now = new Date();
  const currentHour = now.getHours();
for (let h = 6; h <= 21; h++) {
    const hourStr = `${h < 10 ? "0" + h : h}:00`;
    const tr = document.createElement("tr");
    tr.innerHTML = `<td class="hour-col">${hourStr}</td>`;

    dateList.forEach(date => {
        const slot = schedule[date]?.[hourStr];
        const slotTime = new Date(date + "T" + hourStr + ":00"); 

        let cellContent = `<span class="empty-slot">-</span>`;
        let cellClass = "";

        if (slot) {
            if (slot.TrangThai === "C√≤n tr·ªëng" && slotTime > now) {
                cellContent = `<label class="available-slot">
                                <input type="checkbox" class="booking-checkbox"
                                 data-date="${date}" data-hour="${hourStr}"
                                 data-san="${slot.IDSan}"
                                 value="${formatCurrency(slot.Gia)}ƒë">
                              </label>`;
                cellClass = "highlight"; // M√†u xanh nh·∫°t
            } else if (slotTime <= now) {
                cellContent = `<span class="past-slot">H·∫øt h·∫°n</span>`; // ƒê√°nh d·∫•u h·∫øt h·∫°n
                cellClass = "disabled-slot"; // M√†u x√°m
            } else {
                cellContent = `<span class="booked-slot">(${slot.TrangThai})</span>`;
            }
         }    
        tr.innerHTML += `<td class="${cellClass}">${cellContent}</td>`;
    });
    tbody.appendChild(tr);
  }
        
        tr.innerHTML += `<td class="${cellClass}">${cellContent}</td>`;
    });
    tbody.appendChild(tr);
  }
}

function organizeSchedule(data) {
  const schedule = {};
  data.forEach(({ NgayDat, GioBatDau, IDSan, Gia, TrangThai }) => {
    if (!schedule[NgayDat]) schedule[NgayDat] = {};
    schedule[NgayDat][GioBatDau] = { IDSan, Gia, TrangThai };
  });
  return schedule;
}

function generateDateList(startDateStr, daysCount) {
  const result = [];
  const startDate = new Date(startDateStr);
  for (let i = 0; i < daysCount; i++) {
    const d = new Date(startDate);
    d.setDate(startDate.getDate() + i);
    result.push(d.toISOString().split("T")[0]);
  }
  return result;
}

function formatCurrency(amount) {
  return parseFloat(amount).toLocaleString("vi-VN");
}

function setTextContent(id, value) {
  const element = document.getElementById(id);
  if (element) {
    element.textContent = value || "Kh√¥ng c√≥ th√¥ng tin";
  } else {
    console.error(`‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #${id} trong DOM`);
  }
}

document.addEventListener("DOMContentLoaded", function () {
  document.addEventListener("change", function (event) {
      if (event.target.classList.contains("booking-checkbox")) {
          updateBookingInfo();
      }
  });
});

async function getUserInfo(userId) {
  try {
      const response = await fetch(`http://localhost:3000/nguoidung/${userId}`);
      const data = await response.json();

      if (response.ok) {
          return data;
      } else {
          throw new Error(data.error || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
      }
  } catch (error) {
      console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
      return null;
  }
}

async function updateBookingInfo() {
  const selectedFields = document.getElementById("selected-fields");
  const totalPriceElement = document.getElementById("total-price");
  const userId = localStorage.getItem("userId");
  if (userId) {
    getUserInfo(userId).then(userInfo => {
      if (userInfo) {
        console.log("Th√¥ng tin ng∆∞·ªùi d√πng:", userInfo);
      }
    });
  }
  const userInfo = await getUserInfo(userId);
  if (!userInfo) return;

  let total = 0;
  selectedFields.innerHTML = "";

  document.querySelectorAll(".booking-checkbox:checked").forEach(checkbox => {
      const date = checkbox.getAttribute("data-date");
      const hour = checkbox.getAttribute("data-hour");
      const price = parseInt(checkbox.value.replace(/\D/g, ""));
      total += price;

      const fieldInfo = document.createElement("div");
      fieldInfo.classList.add("personal-info");
      fieldInfo.innerHTML = `
            <div class="left-column">
                <p><strong>Ng√†y:</strong> ${date}</p>
                <p><strong>Gi·ªù:</strong> ${hour}</p>
                <p><strong>Gi√°:</strong> ${formatCurrency(price)}ƒë</p>
            </div>
            <div class="right-column">
                <p><strong>Ng∆∞·ªùi ƒë·∫∑t:</strong> ${userInfo.HoTen}</p>
                <p><strong>Email:</strong> ${userInfo.Email}</p>
                <p><strong>SƒêT:</strong> ${userInfo.SDT}</p>
            </div>
      `;
      selectedFields.appendChild(fieldInfo);
  });
  totalPriceElement.textContent = `T·ªïng gi√°: ${formatCurrency(total)}ƒë`;
}

function formatDate(dateStr) {
  const [year, month, day] = dateStr.split("-");
  return `${day}/${month}`;
}
