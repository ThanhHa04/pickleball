// C·∫•u h√¨nh Firebase
const firebaseConfig = {
    apiKey: "AIzaSyATp-eu8CBatLs04mHpZS4c66FaYw5zLgk",
    authDomain: "pka-pickleball.firebaseapp.com",
    projectId: "pka-pickleball",
    storageBucket: "pka-pickleball.appspot.com",
    messagingSenderId: "38130361867",
    appId: "1:38130361867:web:f3c1a3940e3c390b11890e",
    measurementId: "G-0YQ7GKJKRC"
};

// Kh·ªüi t·∫°o Firebase
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();

async function checkEmailExists(email) {
    const apiKey = "1f3a48c94b7d7239c66e4d008a8c469e"; // Thay b·∫±ng API Key m·ªõi
    const apiUrl = `https://apilayer.net/api/check?access_key=${apiKey}&email=${email}&smtp=1&format=1`;

    try {
        const response = await fetch(apiUrl);
        const data = await response.json();
        // Ki·ªÉm tra n·∫øu API tr·∫£ v·ªÅ l·ªói
        if (data.success === false) {
            console.error("L·ªói API:", data.error);
            return false;
        }

        // X√°c th·ª±c email d·ª±a tr√™n nhi·ªÅu ti√™u ch√≠
        if (data.format_valid && data.mx_found && data.score >= 0.4) {
            return true;
        }

        return false;
    } catch (error) {
        console.error("L·ªói ki·ªÉm tra email:", error);
        return false;
    }
}

// X·ª≠ l√Ω s·ª± ki·ªán ƒëƒÉng k√Ω
document.addEventListener("DOMContentLoaded", function () {
    document.getElementById("signup-form").addEventListener("submit", async function (e) {
        e.preventDefault(); // NgƒÉn ch·∫∑n load l·∫°i trang

        // L·∫•y d·ªØ li·ªáu t·ª´ input
        const hoTen = document.getElementById("fullName").value;
        const email = document.getElementById("email").value;
        const matKhau = document.getElementById("password").value;
        const confirmMatKhau = document.getElementById("confirmpassword").value;
        const sdt = document.getElementById("phone").value;
        const diaChi = document.getElementById("address").value;

        // Ki·ªÉm tra nh·∫≠p ƒë·ªß d·ªØ li·ªáu
        if (!hoTen || !email || !matKhau || !confirmMatKhau || !sdt || !diaChi) {
            toastr.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u nh·∫≠p l·∫°i
        if (matKhau !== confirmMatKhau) {
            toastr.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng tr√πng kh·ªõp!");
            return;
        }

        try {
            // üî• Ki·ªÉm tra email c√≥ th·ª±c s·ª± t·ªìn t·∫°i kh√¥ng
            const emailExists = await checkEmailExists(email);
            if (!emailExists) {
                toastr.error("Email kh√¥ng t·ªìn t·∫°i khi ƒë√£ ki·ªÉm tra b·∫±ng Mailbox Layer!");
                return;
            }
            // üî• Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong collection `nguoidung` ch∆∞a
            const userRef = db.collection("nguoidung");
            const querySnapshot = await userRef.where("Email", "==", email).get();

            if (!querySnapshot.empty) {
                toastr.error("Email ƒë√£ t·ªìn t·∫°i! Vui l√≤ng s·ª≠ d·ª•ng email kh√°c.");
                return;
            }

            // L·∫•y t·∫•t c·∫£ c√°c IDNguoiDung ƒë√£ c√≥ v√† t√¨m ID m·ªõi
            const usersSnapshot = await userRef.get();
            let maxId = 0;
            usersSnapshot.forEach(doc => {
                const id = doc.data().IDNguoiDung;
                if (id && id.startsWith("PKA0")) {
                    const numberPart = id.slice(4);
                    const num = parseInt(numberPart, 10);
                    if (!isNaN(num) && num > maxId) {
                        maxId = num;
                    }
                }
            });

            const newId = `PKA0${(maxId + 1).toString()}`; // T·∫°o ID m·ªõi tƒÉng d·∫ßn m√† kh√¥ng gi·ªõi h·∫°n s·ªë ch·ªØ s·ªë

            // N·∫øu ch∆∞a t·ªìn t·∫°i, th√™m d·ªØ li·ªáu v√†o collection `nguoidung`
            await userRef.add({
                HoTen: hoTen,
                Email: email,
                MatKhau: matKhau,  // üî¥ KH√îNG N√äN l∆∞u m·∫≠t kh·∫©u tr·ª±c ti·∫øp, c·∫ßn m√£ h√≥a
                SDT: sdt,
                DiaChi: diaChi,
                IDNguoiDung: newId,
                NgayTao: firebase.firestore.FieldValue.serverTimestamp()
            });

            alert("ƒêƒÉng k√Ω th√†nh c√¥ng!");
            window.location.href = "login.html"; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
        } catch (error) {
            toastr.error("L·ªói: " + error.message);
        }
    });
});
